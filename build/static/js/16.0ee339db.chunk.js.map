{"version":3,"sources":["../../src/index.ts"],"names":["chainIdToNetwork","FortmaticConnector","apiKey","chainId","Object","keys","includes","toString","supportedChainIds","activate","fortmatic","getProvider","enable","then","accounts","account","provider","m","Fortmatic","undefined","getChainId","getAccount","send","deactivate","close","user","logout","emitDeactivate","AbstractConnector","emitUpdate","update","emit","ConnectorEvent","Update","emitError","error","Error","Deactivate","EventEmitter"],"mappings":"qLAIA,IAAMA,EAAkD,CACtD,EAAG,UACH,EAAG,UACH,EAAG,UACH,GAAI,SAQOC,EAAb,Y,QAME,c,MAAcC,WAAQC,Y,OACVC,OAAOC,KAAKL,GAAkBM,SAASH,EAAQI,aAAzD,aAAS,IACT,cAAM,CAAEC,kBAAmB,CAACL,MAA5B,MAEKD,OAASA,EACd,EAAKC,QAAUA,E,CAChB,C,EAZH,G,EAAA,G,6EAAA,2BAceM,SAdf,e,wCAuB0B,EAAKC,UACxBC,cACAC,SACAC,MAAK,SAACC,GAAD,OAAgCA,EAAS,EAAzC,KAHc,eAAhBC,GAKN,MAAO,CAAEC,SAAU,EAAKN,UAAUC,cAAeR,QAAS,EAAKA,QAASY,U,OAbnE,K,iBAAA,EAAKL,U,uBACgB,oCAAoBG,MAAK,YAAC,4BAAII,OAAJ,EAAIA,EAAC,SAAL,EAAkBA,CAAlB,KAA1B,eAAlBC,GACN,EAAKR,UAAY,IAAIQ,EACnB,EAAKhB,OACY,IAAjB,EAAKC,SAAkC,IAAjB,EAAKA,aAAgBgB,EAAYnB,EAAiB,EAAKG,S,sDAnBrF,uCA+BeQ,YA/Bf,eAgCI,uBAAO,KAAKD,UAAUC,cAhC1B,uCAmCeS,WAnCf,eAoCI,uBAAO,KAAKjB,QApChB,uCAuCekB,WAvCf,eAwCI,uBAAO,KAAKX,UACTC,cACAW,KAAK,gBACLT,MAAK,SAACC,GAAD,OAAgCA,EAAS,EAAzC,IA3CZ,uCA8CSS,wBA9CT,EAgDeC,MAhDf,e,MAiDU,K,uBAAA,EAAKd,UAAUe,KAAKC,UAApB,iBACN,EAAKC,gB,GAlDT,wCAAwCC,I,8FAblBA,EAAtB,Y,4BAGgBpB,Q,MAAkD,CAAC,EAAD,GAAlDA,kB,6BAEPA,kBAAoBA,E,oHASjBqB,oBAAWC,G,KAIdC,KAAKC,IAAeC,OAAQH,E,IAGzBI,mBAAUC,G,KAIbJ,KAAKC,IAAeI,MAAOD,E,IAGxBR,0B,KAIHI,KAAKC,IAAeK,W,IAhC7B,CAAgDC,e","file":"static/js/16.0ee339db.chunk.js","sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n"],"sourceRoot":""}