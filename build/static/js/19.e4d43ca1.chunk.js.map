{"version":3,"sources":["../../src/index.ts"],"names":["TorusConnector","chainId","initOptions","constructorOptions","loginOptions","supportedChainIds","activate","torus","login","then","accounts","account","provider","m","Torus","init","getProvider","getChainId","getAccount","ethereum","request","method","deactivate","close","cleanUp","undefined","emitDeactivate","AbstractConnector","emitUpdate","update","emit","ConnectorEvent","Update","emitError","error","Error","Deactivate","EventEmitter"],"mappings":"6PAUaA,EAAb,Y,QAQE,c,MAAcC,Y,IAASC,yBAAc,K,IAAIC,gCAAqB,K,IAAIC,0BAAe,K,OAC/E,cAAM,CAAEC,kBAAmB,CAACJ,MAA5B,MAEKA,QAAUA,EACf,EAAKC,YAAcA,EACnB,EAAKC,mBAAqBA,EAC1B,EAAKC,aAAeA,E,CACrB,C,EAfH,G,EAAA,G,sEAAA,2BAiBeE,SAjBf,e,MAkBS,K,oCAMiB,EAAKC,MAAMC,MAAM,EAAKJ,cAAcK,MAAK,SAACC,GAAD,OAAgCA,EAAS,EAAzC,KAAzC,eAAhBC,GAEN,MAAO,CAAEC,SAAU,EAAKL,MAAMK,SAAUD,U,sBARnC,EAAKJ,M,uBACY,2EAAiCE,MAAK,YAAC,4BAAII,OAAJ,EAAIA,EAAC,SAAL,EAAkBA,CAAlB,KAAvC,eAAdC,G,OACN,EAAKP,MAAQ,IAAIO,EAAM,EAAKX,oB,gBACtB,EAAKI,MAAMQ,KAAK,EAAKb,cAArB,oB,sDArBZ,uCA6Bec,YA7Bf,eA8BI,uBAAO,KAAKT,MAAMK,SA9BtB,uCAiCeK,WAjCf,eAkCI,uBAAO,KAAKhB,QAlChB,uCAqCeiB,WArCf,eAsCI,uBAAO,KAAKX,MAAMY,SAASC,QAAQ,CAAEC,OAAQ,iBAAkBZ,MAAK,SAACC,GAAD,OAAgCA,EAAS,EAAzC,IAtCxE,uCAyCeY,WAzCf,W,wBAyC8B,EAzC9B,EA2CeC,MA3Cf,e,MA4CU,K,uBAAA,EAAKhB,MAAMiB,WAAX,iBACN,EAAKjB,WAAQkB,EACb,EAAKC,gB,GA9CT,wC,OAAoCC,E,8FAPdA,EAAtB,Y,4BAGgBtB,Q,MAAkD,CAAC,EAAD,GAAlDA,kB,6BAEPA,kBAAoBA,E,oHASjBuB,oBAAWC,G,KAIdC,KAAKC,IAAeC,OAAQH,E,IAGzBI,mBAAUC,G,KAIbJ,KAAKC,IAAeI,MAAOD,E,IAGxBR,0B,KAIHI,KAAKC,IAAeK,W,IAhC7B,CAAgDC,e","file":"static/js/19.e4d43ca1.chunk.js","sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n"],"sourceRoot":""}